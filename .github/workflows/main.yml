name: Build and Deploy to AKS

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    env:
      ACR_NAME: ${{ vars.ACR_NAME }}              # Azure Container Registry Name
      IMAGE_NAME: photographer                   # Docker image name

    steps:
      # Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Log in to Azure using GitHub Action
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ vars.AZURE_CLI_CREDENTIALS }}

      # Build the Docker image
      - name: Build Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG .

      # Log in to Azure Container Registry
      - name: Log in to ACR
        run: |
          az acr login --name $ACR_NAME

      # Push the Docker image to ACR
      - name: Push Docker Image to ACR
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker push $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG

  deploy-staging:
    name: Deploy to Staging AKS
    runs-on: ubuntu-latest
    needs: build-and-push

    env:
      CLUSTER_NAME_STAGING: ${{ vars.CLUSTER_NAME }}  # Staging AKS Cluster Name
      RESOURCE_GROUP_STAGING: ${{ vars.RESOURCE_GROUP }}  # Resource Group for Staging AKS
      ACR_NAME: ${{ vars.ACR_NAME }}  # Azure Container Registry Name
      IMAGE_NAME: photographer  # Docker image name

    steps:
      # Log in to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ vars.AZURE_CLI_CREDENTIALS }}

      # Set up kubectl for Staging AKS
      - name: Set up Staging AKS Credentials
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP_STAGING --name $CLUSTER_NAME_STAGING --overwrite-existing

      # Deploy to Staging AKS
      - name: Deploy to Staging AKS
        run: |
          IMAGE_TAG=${{ github.sha }}
          kubectl set image deployment/angular-app-deployment angular-app-container=$ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG

  deploy-production:
    name: Deploy to Production AKS
    runs-on: ubuntu-latest
    needs: deploy-staging  # Ensures production deployment happens after staging deployment
    environment:
      name: production  # Requires manual approval for this environment

    env:
      CLUSTER_NAME_PROD: ${{ vars.CLUSTER_NAME_PROD }}  # Production AKS Cluster Name
      RESOURCE_GROUP_PROD: ${{ vars.RESOURCE_GROUP }}  # Resource Group for Production AKS
      ACR_NAME: ${{ vars.ACR_NAME }}  # Azure Container Registry Name
      IMAGE_NAME: photographer  # Docker image name

    steps:
      # Log in to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ vars.AZURE_CLI_CREDENTIALS }}

      # Set up kubectl for Production AKS
      - name: Set up Prod AKS Credentials
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP_PROD --name $CLUSTER_NAME_PROD --overwrite-existing


      - name: Initial Deployment
        run: |
          kubectl apply -f deployment.yaml   # Ensure deployment.yaml contains the correct spec for your app
          
      # Deploy to Production AKS
      - name: Deploy to Prod AKS
        run: |
          IMAGE_TAG=${{ github.sha }}
          kubectl set image deployment/angular-app-deployment angular-app-container=$ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG
