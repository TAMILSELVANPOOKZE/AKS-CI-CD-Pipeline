name: Build and Deploy to AKS

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    env:
      ACR_NAME: ${{ vars.ACR_NAME }}        # Azure Container Registry Name
      IMAGE_NAME: photographer              # Docker image name

    steps:
      # Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Debug Directory Structure
      - name: Debug Directory
        run: |
          echo "Checking file structure..."
          ls -al
          ls -al src/

      # Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CLI_CREDENTIALS }}

      # Build the Docker Image
      - name: Build Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG .

      # Log in to Azure Container Registry
      - name: Log in to ACR
        run: |
          az acr login --name $ACR_NAME

      # Push the Docker Image to ACR
      - name: Push Docker Image to ACR
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker push $ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG

  deploy-staging:
    name: Deploy to Staging AKS
    runs-on: ubuntu-latest
    needs: build-and-push

    env:
      CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}            # Staging AKS Cluster Name
      RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}        # Resource Group
      ACR_NAME: ${{ vars.ACR_NAME }}                   # Azure Container Registry Name
      IMAGE_NAME: photographer                         # Docker image name

    steps:
      # Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CLI_CREDENTIALS }}

      # Configure kubectl for Staging AKS
      - name: Configure kubectl for Staging
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --overwrite-existing

      # Deploy to Staging
      - name: Deploy to Staging AKS
        run: |
          IMAGE_TAG=${{ github.sha }}
          kubectl set image deployment/angular-app-deployment angular-app-container=$ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG
          kubectl rollout status deployment/angular-app-deployment

  deploy-production:
    name: Deploy to Production AKS
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: production  # Requires manual approval for production deployment

    env:
      CLUSTER_NAME_PROD: ${{ vars.CLUSTER_NAME_PROD }}  # Production AKS Cluster Name
      RESOURCE_GROUP_PROD: ${{ vars.RESOURCE_GROUP }}   # Resource Group
      ACR_NAME: ${{ vars.ACR_NAME }}                   # Azure Container Registry Name
      IMAGE_NAME: photographer                         # Docker image name

    steps:
      # Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CLI_CREDENTIALS }}

      # Configure kubectl for Production AKS
      - name: Configure kubectl for Production
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP_PROD --name $CLUSTER_NAME_PROD --overwrite-existing

      # Debug Existing Deployment
      - name: Debug Existing Deployment
        run: |
          kubectl get deployments -o yaml
          kubectl get pods -o wide

      # Deploy to Production
      - name: Deploy to Production AKS
        run: |
          IMAGE_TAG=${{ github.sha }}
          kubectl set image deployment/angular-app-deployment angular-app-container=$ACR_NAME.azurecr.io/$IMAGE_NAME:$IMAGE_TAG
          kubectl rollout status deployment/angular-app-deployment
